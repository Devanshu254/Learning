Q1. Find the largest element in an array.

int get_largest(int arr[], int n){
  int res = arr[0];
  for(int i=1;i<n;i++)
    if(arr[i]>res)
      res = arr[i];
  return res;
}

Q2. Find the median in the vector.
Input: N = 4
arr[] = 56 67 30 79
Output: 61

Solution:
int find_median(vector<int> v){     // calculation of size of array = sizeof(arr)/sizeof(arr[0]);
  sort(v.begin(),v.end());
  int n = v.size();
  if(n%2==1)
    return v[n/2];
  else
    return (v[n/2]+v[(n/2)-1])/2;
}

Q3. Find the second largest element in the array.
N = 6
Arr[] = {12, 35, 1, 10, 34, 1}
Output: 34

class Solution{
public:	
	// Function returns the second
	// largest elements
	int print2largest(int arr[], int n) {
	    // code here
	    int maxi=-1,maxi2=INT_MIN;
	    for(int i=0;i<n;i++)
	    {
	        if(arr[i]>maxi)
	        {
	            maxi2=maxi;
	            maxi=arr[i];
	        }
	        if(arr[i]>maxi2 && arr[i]<maxi)
	        maxi2=arr[i];
	    }
	    return maxi2;
	}
};

Q4. Check if the array is sorted or not.
Input:
N = 6
arr[] = {90, 80, 100, 70, 40, 30}
Output: 0

bool arraySortedOrNot(int arr[], int n) {
        // code here
        if(n==1||n==0){
            return true;
        }
        for(int i=1;i<n;i++){
            if(arr[i]<arr[i-1]){
                return false;
            }
        }
        return true;
    }

Q5. Printing reverse an array.
I/P : arr[] = {10,5,7,30};
O/P : arr[] = {30,7,5,10};

void reverse(int arr[], int n){
	int low = 0, high = n-1;
	while(low<high){
		int temp = arr[low];
		arr[low] = arr[high];
		arr[high] = temp;
		low++;
		high--;
	}
}

Q6. Remove duplicates from sorted array.

I/P : arr[] = {10,20,20,30,30,30,30};
size = 7
O/P : arr[] = {10,20,30,_,_,_,_};

int remove_dups(int arr[], int n){
	int res = 1;
	for(int i=1; i<n; i++){
		if(arr[i]!=arr[res-1]){
			a[res] = a[i];
			res++;
		}
	}
	return res;
}

Q7. Move all zeros to end.
I/P : {8,5,0,10,0,20};
O/P : {8,5,10,20,0,0};

void move_zeros(int arr[], int n){
	int count = 0;
	for(int i=0;i<n;i++){
		if(arr[i]!=0){
			swap(arr[i],arr[count]);
			count++;
		}
	}
}

Q8. Left rotate an array by one.

I/P : arr[] : {1,2,3,4,5};
o/P : arr[] : {2,3,4,5,1};

void lRotate(int arr[],int n){
	int temp = arr[0];
	for(int i=1;i<n;i++){
		arr[i-1] = arr[i];
	}
	arr[n-1] = temp;
}

Q8. Left rotate an array by d.

I/P: arr[] = {1,2,3,4,5};
		 d = 2
O/P: arr[] = {3,4,5,1,2};

void leftRotate(int arr[], int k, int n) 
	{ 
	   // Your code goes here
	   rotate(arr,arr+(k%n),arr+n); 
	   
	}

Q9. Find the leaders.
Input:
n = 6
A[] = {16,17,4,3,5,2}
Output: 17 5 2
Solution->
vector<int> leaders(int a[], int n){
        // Code here
        vector<int> ans;
        int bigger = INT_MIN;
        for(int i=n-1;i>=0;i--){
            if(a[i]>=bigger){
                ans.push_back(a[i]);
                bigger = a[i];
            }
        }
        reverse(ans.begin(),ans.end());
        return ans;
    }
