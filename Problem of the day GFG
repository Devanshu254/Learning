Date - 15th June 2023.

Q1. Longest Palindrome in a String.

Given a string S, find the longest palindromic substring in S. 
Substring of string S: S[ i . . . . j ] where 0 ≤ i ≤ j < len(S). 
Palindrome string: A string that reads the same backward. More formally, 
S is a palindrome if reverse(S) = S. In case of conflict, return the substring
which occurs first ( with the least starting index).

Example 1:

Input:
S = "aaaabbaa"
Output: aabbaa
Explanation: The longest Palindromic
substring is "aabbaa".

Example 2:

Input: 
S = "abc"
Output: a
Explanation: "a", "b" and "c" are the 
longest palindromes with same length.
The result is the one with the least
starting index.

Expected Time Complexity: O(|S|2).
Expected Auxiliary Space: O(1).

Solution -> 

string longestPalin(string S){
  int n = S.length();
  int start = 0;
  int maxLength = 1;
  for(int i=0;i<n;i++){
    int left = i;
    int right = i;
    //left expansion.
    while(left>=0 && right<n && S[left] == S[right]){
      if(right - left +1 > maxLength){
        maxLength = right-left+l;
        start = left;
      }
      left--;
      right++;
    }
    int left = i;
    int right = i+1;
    while(left>=0 && right<n && S[left] == S[right]){
      if(right-left+1 > maxLength){
        maxLength = right-left+1;
        start = left;
      }
      left--;
      right++;
    }
  }
}
