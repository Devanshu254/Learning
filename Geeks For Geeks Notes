Date -> 10th april 2023.

Q1. Detect the loop in the linked list using floyd's cycle detection method.

Ans -> bool detectLoop(Node* head)
    {
        // your code here
        if(head == NULL || head -> next == NULL){
            return 0;
        }
        Node* slow = head;
        Node* fast = head;
        while(fast -> next && fast -> next -> next){
            slow = slow -> next;
            fast = fast -> next -> next;
            if(slow == fast){
                return 1;
            }
        }
        return 0;
    }
    
Q2. Nth node from end of linked list.
    Input:
    N = 2
    LinkedList: 1->2->3->4->5->6->7->8->9
    Output: 8
    Input:
    N = 5
    LinkedList: 10->5->100->5
    Output: -1
    Answer -> 
    
    int getNthFromLast(Node *head, int n)
{
       // Your code here
       Node* curr = head;
       int count = 0;
       while(curr != NULL){
           curr = curr -> next;
           count++;
       }
       if(n > count){
           return -1;
       }
       count = count - n;
       curr = head;
       for(int i = 0; i < count; i++){
           curr = curr -> next;
       }
       return (curr -> data);
}

Q3. Finding middle element in a linked list

Answer -> int getMiddle(Node *head)
    {
        // Your code here
        Node* curr = head;
        int count = 0;
        while(curr != NULL){
            curr = curr->next;
            count++;
        }
        int middle = 0;
        if(count % 2 == 0){
            middle = count/2;
        }else{
            middle = count/2;
        }
        curr = head;
        for(int i=0;i<middle;i++){
            curr = curr->next;
        }
        return (curr->data);
    }
    
Q4. Reverse a linked list
Input:
LinkedList: 1->2->3->4->5->6
Output: 6 5 4 3 2 1
Explanation: After reversing the list, 
elements are 6->5->4->3->2->1.
Answer -> 

struct Node* reverseList(struct Node *head)
    {
        // code here
        // return head of reversed list
        Node* prev = NULL;
        Node* curr = head;
        while(curr != NULL){
            Node* next = curr->next;
            curr->next = prev;
            prev = curr;
            curr = next;
        }
        return prev;
    }
    
   Q5. Flattening the linked list.
   Problem statement -> 
   Given a Linked List of size N, where every node represents a sub-linked-list and contains two pointers:
(i) a next pointer to the next node,
(ii) a bottom pointer to a linked list where this node is head.
Each of the sub-linked-list is in sorted order.
Flatten the Link List such that all the nodes appear in a single level while maintaining the sorted order. 

Note: The flattened list will be printed using the bottom pointer instead of the next pointer.
For more clarity have a look at the printList() function in the driver code.

 

Example 1:

Input:
5 -> 10 -> 19 -> 28
|     |     |     | 
7     20    22   35
|           |     | 
8          50    40
|                 | 
30               45
Output:  5-> 7-> 8- > 10 -> 19-> 20->
22-> 28-> 30-> 35-> 40-> 45-> 50.
Explanation:
The resultant linked lists has every 
node in a single level.
(Note: | represents the bottom pointer.)

   Solution -> 
   
   Node* mergeTwoLists(Node* a ,Node* b){
    Node* temp = new Node(0);
    Node* res = temp;
    
    while(a != NULL && b != NULL){
        if(a->data < b->data){
            temp->bottom = a;
            temp = temp->bottom;
            a = a->bottom;
        }else{
            temp->bottom = b;
            temp = temp->bottom;
            b = b->bottom;
        }
        if(a) temp->bottom = a;
        else temp->bottom = b;
    }
    return res->bottom;
}
Node *flatten(Node *root)
{
   // Your code here
   if(root == NULL || root->next == NULL){
       return root;
   }
   root->next = flatten(root->next);
   root = mergeTwoLists(root, root->next);
   
   return root;
}
    
    Q7. Given a linked list, we need to cancel out all the resources whose sum is equal
        to zero and return the remaining linked list.
        
        Input =  6 -6 8 4 -12 9 8 -8
        Nodes which get cancelled out are:
        6 -6
        8 4 -12
        8 -8
        Output = 9
        
        Input = 4 6 -10 8 9 10 -19 10 -18 20 25.
        Output = 20 25
        
    Solution ->  
        
        Node removeCancellableNodes(Node listHead)
{
	if (listHead == null) return null; // or listHead
	Stack<Node> stack = new Stack<Node>();
	Node node = listHead;  	
	while(node != null)
	{
		if (node.value < 0)
		{
			int sum = node.value;
                        while (!stack.isEmpty())
			{
				Node temp = stack.pop();
				sum -= temp.value;
				temp = null;
				if (sum == 0)
				{
					node = stack.peek();
					break;
				}
			}
		}
		else
		{
			stack.push(node);
		}
		node = node.next;
	}
	
	return listHead;
}

Q8. Add 1 to a number represented as linked list.
A number N is represented in Linked List such that each digit corresponds to a node in linked list. You need to add 1 to it.

Example 1:

Input:
LinkedList: 4->5->6
Output: 457 

Solution -> 
1. Reverse given linked list. For example, 1-> 9-> 9 -> 9 is converted to 9-> 9 -> 9 ->1.
2. Start traversing linked list from leftmost node and add 1 to it.
   If there is a carry, move to the next node. Keep moving to the next node while 
   there is a carry.
3. Reverse modified linked list and return head.

class Solution
{
    public:
    Node* reverse(Node* head){
        Node* prev = NULL;
        Node* current = head;
        Node* next;
        while(current != NULL){
            next = current->next;
            current->next = prev;
            prev = current;
            current = next;
        }
        return prev;
    }
    Node* addOneUntil(Node* head){
        Node* res = head;
        Node* temp;
        int carry = 1, sum;
        while(head != NULL){
            sum = carry + head->data;
            if(sum>=10){
                carry = 1;
            }else{
                carry = 0;
            }
            sum = sum%10;
            head->data = sum;
            temp = head;
            head = head->next;
        }
        if(carry>0){
            temp->next = new Node(carry);
        }
        return res;
    }
    Node* addOne(Node *head) 
    {
        // Your Code here
        // return head of list after adding one
        head = reverse(head);
        head = addOneUntil(head);
        return reverse(head);
    }
};

Q9. Reverse a Linked List in groups of given size.
Input:
LinkedList: 1->2->2->4->5->6->7->8
K = 4
Output: 4 2 2 1 8 7 6 5 
Explanation: 
The first 4 elements 1,2,2,4 are reversed first 
and then the next 4 elements 5,6,7,8. Hence, the 
resultant linked list is 4->2->2->1->8->7->6->5.

Answer-> 
struct node *reverse (struct node *head, int k)
    { 
        // Complete this method
        if(head == NULL){
            return NULL;
        }
        node* current = head;
        node* next = NULL;
        node* prev = NULL;
        int count = 0;
        while(current != NULL && count<k){
            next = current->next;
            current->next = prev;
            prev = current;
            current = next;
            count++;
        }
        if(next != NULL){
            head->next = reverse(next,k);
        }
        return prev;
    }
    
    Q10. Check if Linked List is Palindrome.
    Given a singly linked list of size N of integers. The task is to check if the given linked list is palindrome or not.

Example 1:

Input:
N = 3
value[] = {1,2,1}
Output: 1
Explanation: The given linked list is
1 2 1 , which is a palindrome and
Hence, the output is 1.

Solution->

class Solution{
  public:
    //Function to check whether the list is palindrome.
    
    bool isPalindrome(Node *head)
    {
        //Your code here
        if(head == NULL || head->next == NULL){
            return true;
        }
        Node* slow = head;
        Node* fast = head;
        while(fast->next != NULL && fast->next->next != NULL){
            slow = slow->next;
            fast = fast->next->next;
        }
        slow->next = reverseList(slow->next);
        slow = slow->next;
        while(slow != NULL){
            if(slow->data != head->data){
                return false;
            }
            slow = slow->next;
            head = head->next;
        }
        return true;
    }
    Node* reverseList(Node* head){
        Node* current = head;
        Node* prev = NULL;
        Node* next = NULL;
        while(current != NULL){
            next = current->next;
            current->next = prev;
            prev = current;
            current = next;
        }
        return prev;
    }
};

1 May 2023.

Q11. Inorder Traversal
Given a Binary Tree, find the In-Order Traversal of it.

Example 1:

Input:
       1
     /  \
    3    2
Output: 3 1 2
Solution - 
vector<int> inOrder(Node* root) {
        // Your code here
        vector<int> result;
    if (root != NULL) {
        vector<int> left = inOrder(root->left);
        result.insert(result.end(), left.begin(), left.end());
        result.push_back(root->data);
        vector<int> right = inOrder(root->right);
        result.insert(result.end(), right.begin(), right.end());
    }
    return result;
    }
    
    Q12. Preorder traversal.
    Given a binary tree, find its preorder traversal.

Example 1:

Input:
        1      
      /          
    4    
  /    \   
4       2
Output: 1 4 4 2 

Solution -> 

vector <int> preorder(Node* root)
{
  // Your code here
  vector<int> result;
  if(root != NULL){
      result.push_back(root->data);
      vector<int> left = preorder(root->left);
      result.insert(result.end(), left.begin(), left.end());
      vector<int> right = preorder(root->right);
      result.insert(result.end(), right.begin(), right.end());
  }
  return result;
}

Q13. Post Order Traversal.
Given a binary tree, find the Postorder Traversal of it.
For Example, the postorder traversal of the following tree is:
5 10 39 1

        1
     /     \
   10     39
  /
5


Example 1:

Input:
        19
     /     \
    10      8
  /    \
 11    13
Output: 11 13 10 8 19

Solution ->

vector <int> postOrder(Node* root)
{
  // Your code here
  vector<int> result;
  if(root != NULL){
      vector<int> left = postOrder(root->left);
      result.insert(result.end(), left.begin(), left.end());
      vector<int> right = postOrder(root->right);
      result.insert(result.end(), right.begin(), right.end());
      result.push_back(root->data);
  }
  return result;
}

Q14. Minimum element in BST.
Given a Binary Search Tree. The task is to find the minimum valued element in this given BST.

Example 1:

Input:
           5
         /    \
        4      6
       /        \
      3          7
     /
    1
Output: 1

Solution -> 

To find the minimum valued element in a binary search tree (BST),
we can traverse the left subtree of the BST until we reach the leaf node 
with the minimum value. Since a BST follows the property that all nodes 
in the left subtree of a node have values less than the node's value, we
can be sure that the node with the minimum value is the leftmost node in the BST.

int minValue(Node* root)
{
    // If the input BST is empty, return -1
    if (root == NULL) {
        return -1;
    }
    
    // Traverse the left subtree until we reach a leaf node
    while (root->left != NULL) {
        root = root->left;
    }
    
    // Return the minimum value
    return root->data;
}

Q15. Count Leaves in Binary Tree.
Given a Binary Tree of size N, You have to count leaves in it. For example, there are two leaves in following tree

        1
     /      \
   10      39
  /
5

 

Example 1:


Input:
Given Tree is 
               4
             /   \
            8     10
           /     /   \
          7     5     1
         /
        3 
Output:
3
Explanation: 
Three leaves are 3 , 5 and 1.

Solution -> 

int countLeaves(Node* root)
{
  // Your code here
  if(root == NULL){
      return 0;
  }
  if(root->left == NULL && root->right == NULL){
      return 1;
  }
  
  int leftLeaves = countLeaves(root->left);
  int rightLeaves = countLeaves(root->right);
  
  return leftLeaves + rightLeaves;
}

Q16. Print left view of binary tree.
Given a Binary Tree, return Left view of it. Left view of a Binary Tree is set of nodes visible when tree is visited from Left side. The task is to complete the function leftView(), which accepts root of the tree as argument.

Left view of following tree is 1 2 4 8.

          1
       /     \
     2        3
   /     \    /    \
  4     5   6    7
   \
     8   

Example 1:

Input:
   1
 /  \
3    2
Output: 1 3

Answer ->

vector<int> leftView(Node *root)
{
   // Your code here
   vector<int> v;
   if(root == NULL) return v;
   queue<Node*> q;
   q.push(root);
   while(q.empty() == false){
       int count = q.size();
       for(int i=0;i<count;i++){
           Node* curr = q.front();
           q.pop();
           if(i==0){
               v.push_back(curr->data);
           }
           if(curr->left != NULL) q.push(curr->left);
           if(curr->right != NULL) q.push(curr->right);
       }
   }
   return v;
}

Q16. Check the height of binary tree.
Solution->

int height(struct Node* node){
        // code here 
        if(node == NULL) return 0;
        return max(height(node->left),height(node->right))+1;
    }
    
    
Q17. Level order traversal of tree.
Answer -

vector<int> LevelOrder(Node* node){
	vector<int> v;
	if(node == NULL) return v;
	queue<Node*> q;
	q.push(node);
	while(q.empty() == false){
		Node* curr = q.front();
		q.pop();
		v.push_back(curr->data);
		if(curr->left != NULL) q.push(curr->left);
		if(curr->right != NULL) q.push(curr->right);
	}
	return v;
}

Q18. Print right view of binary tree.
Given a Binary Tree, find Right view of it. Right view of a Binary Tree is set of nodes visible when tree is viewed from right side.

Right view of following tree is 1 3 7 8.

          1
       /     \
     2        3
   /   \      /    \
  4     5   6    7
    \
     8

Example 1:

Input:
       1
    /    \
   3      2
Output: 1 2
Example 2:

Input:
     10
    /   \
  20     30
 /   \
40  60 
Output: 10 30 60

Solution->

vector<int> rightView(Node *root)
    {
       // Your Code here
       vector<int> v;
       if(root == NULL) return v;
       queue<Node*> q;
       q.push(root);
       while(q.empty()==false){
           int count = q.size();
           for(int i=0;i<count;i++){
               Node* curr = q.front();
               q.pop();
               if(i==count-1){
                   v.push_back(curr->data);
               }
               if(curr->left != NULL) q.push(curr->left);
               if(curr->right != NULL) q.push(curr->right);
           }
       }
       return v;
    }

Q20. Find level order traversal in spiral form.
Input:
           10
         /     \
        20     30
      /    \
    40     60
Output: 10 20 30 60 40 

Solution ->

vector<int> findSpiral(Node *root)
{
    //Your code here
    vector<int> v;
    if(root == NULL) return v;
    stack<Node*> s1;
    stack<Node*> s2;
    s1.push(root);
    while(!s1.empty() || !s2.empty()){
        while(!s1.empty()){
            Node* temp = s1.top();
            s1.pop();
            v.push_back(temp->data);
            if(temp->right){
                s2.push(temp->right);
            }
            if(temp->left){
                s2.push(temp->left);
            }
        }
        while(!s2.empty()){
            Node* temp = s2.top();
            s2.pop();
            v.push_back(temp->data);
            if(temp->left){
                s1.push(temp->left);
            }
            if(temp->right){
                s1.push(temp->right);
            }
        }
    }
    return v;
}

Date - 8th June 2023.

Q21. Consider a directed graph whose vertices are numbered from 1 to n.
There is an edge from a vertex i to a vertex j iff either j = i + 1 or j = 3 * i.
The task is to find the minimum number of edges in a path in G from vertex 1 to vertex n.

Example 1:

Input:
N = 9
Output:
2
Explanation:
9 -> 3 -> 1, so
number of steps are 2. 
Expected Time Complexity: O(logN)
Expected Auxiliary Space: O(1)

Soultion - 

int minimumstep(int n){
	int count;
	while(n!=1){
		if(n%3==0){
			n = n/3;
		}else{
			n = n-1;
		}
		count++;
	}
	return count;
}

Q22. Find the sum of dependencies in graph.
Given a directed graph with V nodes and E edges. If there is an edge from u to v then u depends on v. Find out the sum of dependencies for every node. Duplicate edges should be counted as separate edges.

Example 1:

Input:
V=4
E=4
Edges={ {0,2},{0,3},{1,3},{2,3} }
Output:
4
Explanation:
For the graph in diagram, A depends
on C and D i.e. 2, B depends on D i.e.
1, C depends on D i.e. 1
and D depends on none.
Hence answer -> 0 + 1 + 1 + 2 = 4
Expected Time Complexity:O(V)
Expected Auxillary Space:O(1)

Solution->

int SumOfDependencies(vector<int> adj[], int V){
	int sum = 0;
	for(int u=0; u<V; u++){
		sum = sum + adj[u].size();
	}
	return sum;
}

Date: - 9th June 2023

Q23. BFS of graph.
Solution - 

vector<int> bfsOfGraph(int V, vector<int> adj[]) {
        // Code here
        vector<int> v;
        queue<int> q;
        q.push(0);
        vector<bool> vis(V,false);
        vis[0] = true;
        while(!q.empty()){
            int u = q.front();
            q.pop();
            v.push_back(u);
            for(auto it: adj[u]){
                if(!vis[it]){
                    vis[it] = true;
                    q.push(it);
                }
            }
        }
        return v;
    }

Q24. DFS of graph.
Solution -> 

vector<int> v;

void solve(int s, vector<bool> &visited, vector<int> adj[]){
	visited[s] = true;
	v.push_back(s);
	for(int u: adj[s]){
		if(!visited[u]){
			solve(u, visited, adj);	
		}
	}
}

vector<int> DfsOfGraph(int V, vector<int> adj[]){
	vector<bool> visited(V,false);
	solve(0,visited,adj);
	return v;
}
