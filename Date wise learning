Date: 25th-oct-2023.
Topic: Hashing.

Q1. Union of two arrays.
Solution -> 
class Solution{
    public:
    //Function to return the count of number of elements in union of two arrays.
    int doUnion(int a[], int n, int b[], int m)  {
        unordered_set<int> s;
        for(int i=0;i<n;i++) {
            s.insert(a[i]);
        }
        for(int i=0;i<m;i++) {
            s.insert(b[i]);
        }
        return s.size();
    }
};

Q2. Check if two arrays are equal or not.
Two arrays are said to be equal if:
both of them contain the same set of elements, 
arrangements (or permutations) of elements might/might not be same.
If there are repetitions, then counts of repeated elements must also be the
same for two arrays to be equal.

Solution -> 

class Solution{
    public:

    //Function to check if two arrays are equal or not.
    bool check(vector<ll> A, vector<ll> B, int N) {
        //code here
        if(A.size() != B.size()) return false;
        unordered_map<int, int> mpp;
        for(int i=0;i<A.size();i++) {
            mpp[A[i]]++;
        }
        for(int i=0;i<B.size();i++) {
            if(mpp.find(B[i]) == mpp.end()) {
                return false;
            }
            if(mpp[B[i]] == 0) {
                return false;
            }
            mpp[B[i]]--;
        }
        return true;
    }
};

Q3. Find the first element which is repeated k times.
Solution -> 

int firstElementKTime(int a[], int n, int k)
    {
        unordered_map<int, int> mpp;
        for(int i=0;i<n;i++) {
            mpp[a[i]]++;
        }
        for(int i=0;i<n;i++) {
            if(mpp[a[i]] == k) {
                return a[i];
            }
        }
        return -1;
    }


Q4. Find the uncommon characters.
Given two strings A and B consisting of lowercase english characters. Find the characters that are not common in the two strings. 

Note :- Return the string in sorted order.

Example 1:

Input:
A = geeksforgeeks
B = geeksquiz
Output: fioqruz
Explanation: 
The characters 'f', 'i', 'o', 'q', 'r', 'u','z' 
are either present in A or B, but not in both.
Solution -> 

string UncommonChars(string A, string B)
        {
            unordered_set<char> setA(A.begin(), A.end());
            unordered_set<char> setB(B.begin(), B.end());
            string result = "";
            for(char c: setA) {
                if(setB.find(c) == setB.end()) {
                    result += c;
                }
            }
            for(char c: setB) {
                if(setA.find(c) == setA.end()) {
                    result += c;
                }
            }
            if(result.empty()) {
                return "-1";
            }
            sort(result.begin(), result.end());
            return result;
        }

Q5. Given an array of N positive integers where all numbers occur even number 
of times except one number which occurs odd number of times. Find the exceptional number.

Solution -> 

int getOddOccurrence(int arr[], int n) {
        // code here
        int result = 0;
        for(int i=0;i<n;i++) {
            result = result ^ arr[i];
        }
        return result;
    }

Date : 26/oct/2023.

Q6. Anagram palindrome.
Given a string S, Check if characters of the given string can be rearranged to form a palindrome.
Note: You have to return 1 if it is possible to convert the given string into palindrome else return 0. 

Example 1:

Input:
S = "geeksogeeks"
Output: Yes
Explanation: The string can be converted
into a palindrome: geeksoskeeg
Solution -> 

int odd = 0;
    for(int i=0;i<NO_OF_CHAR;i++) {
        if(count[i] & 1) {
            odd++;
        }
        if(odd > 1) {
            return false;
        }
    }

Q7. Given a string consisting of lowercase english alphabets. Find the repeated character present first in the string.

Example 1:

Input:
S = "geeksforgeeks"
Output: g
Explanation: g, e, k and s are the repeating
characters. Out of these, g occurs first. 

Answer->

char firstRep (string s)
    {
        //code here.
        unordered_map<int,int> mpp;
        for(int i=0;i<s.size();i++) {
            mpp[s[i]]++;
        }
        for(int i=0;i<s.size();i++) {
            if(mpp[s[i]] > 1) {
                return s[i];
            }
        }
        return '#';
        
    }

Q8. Given a string S of lowercase alphabets, check if it is isogram or not. 
An Isogram is a string in which no letter occurs more than once.

Example 1:

Input:
S = machine
Output: 1
Explanation: machine is an isogram
as no letter has appeared twice. Hence
we print 1.
Answer -> 

bool isIsogram(string s)
    {
        //Your code here
        unordered_map<int,int> mpp;
        for(int i=0;i<s.size();i++) {
            mpp[s[i]]++;
        }
        for(int i=0;i<s.size();i++) {
            if(mpp[s[i]] > 1 || mpp[s[i]] < 1) {
                return 0;
            }
        }
        return 1;
    }

Date: 27 october 2023

Q9. Count the characters
Given a string S. Count the characters that have ‘N’ number of occurrences. If a character appears consecutively it is counted as 1 occurrence.

Example 1:

Input:
S = "abc", N = 1
Output: 3
Explanation: 'a', 'b' and 'c' all have 
1 occurrence.

Solution -> 
int getCount (string S, int N)
        {
            unordered_map<char, int> mpp;
            char Last = '\0'; 
            for(int i=0;i<S.size();i++) {
                if(S[i] != Last) {
                    mpp[S[i]]++;
                    Last = S[i];
                }
            }
            int count = 0;
            for(auto it = mpp.begin(); it != mpp.end(); it++) {
                if(it->second == N) {
                    count++;
                }
            }
            return count;
        }

Q10. Sort the string in descending order
Given a string str containing only lower case alphabets, the task is to sort it in lexicographically-descending order.

Example 1:

Input: str = "geeks"
Output: "skgee"
Explanation: It's the lexicographically-
descending order.
Solution -> 
one simple solution is: 
string ReverseSort(string str){
    //complete the function here
    sort(str.begin(), str.end(), greater<char>());
    return str;
}

Another solution is:
An efficient approach will be to observe first that there can be a total of 26 unique characters only.
So, we can store the count of occurrences of all the characters from ‘a’ to ‘z’ in a hashed array.
The first index of the hashed array will represent character ‘a’, second will represent ‘b’ and so on.
Finally, we will simply traverse the hashed array and print the characters from ‘z’ to ‘a’ the number
of times they occurred in input string.

const int MAX_CHAR = 26;
string ReverseSort(string str){
    //complete the function here
    int charCount[MAX_CHAR] = {0};
    for(int i=0;i<str.length();i++) {
        charCount[str[i]-'a']++;
    }
    string result = "";
    for(int i=MAX_CHAR-1;i>=0;i--) {
        for(int j=0;j<charCount[i];j++) {
            result += (char)('a'+i);
        }
    }
    return result;
}

Q11. Given two sorted arrays(arr1[] and arr2[]) of size M and N of distinct elements. Given a value Sum. The problem is to count all pairs from both arrays whose sum is equal to Sum.
Note: The pair has an element from each array.


Example 1:

Input:
M=4, N=4 , Sum = 10
arr1[] = {1, 3, 5, 7}
arr2[] = {2, 3, 5, 8} 
Output: 2
Explanation: The pairs are: (5, 5) and (7, 3).  

Solution -> 

int countPairs(int arr1[], int arr2[],  int m, int n, int x) 
    { 
        unordered_set<int> s;
        for(int i=0;i<m;i++) {
            s.insert(arr1[i]);
        }
        int count = 0;
        for(int i=0;i<n;i++) {
            if(s.find(x-arr2[i]) != s.end()) {
                count++;
            }
        }
        return count;
    } 

Q12. Unique Numbers
In the given range [L, R], print all numbers having unique digits. e.g. In range 10 to 20 should print all numbers except 11.

Example 1:

Input:
L = 10
R = 20

Output:
10 12 13 14 15 16 17 18 19 20

Explanation:
The number 11 has two 1 therefore
11 is not a unique number.

Solution -> 
bool areUniqueDigits(int n) {
        vector<bool> exists(10, false);
        while(n > 0) {
            if(exists[n%10]) return false;
            exists[n%10] = true;
            n = n / 10;
        }
        return true;
    }
    vector<int> uniqueNumbers(int L,int R)
    {
        vector<int> v;
        for(int i=L;i<=R;i++) {
            if(areUniqueDigits(i)) {
                v.push_back(i);
            }
        }
        return v;
    }
