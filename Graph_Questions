Q1. Consider a directed graph whose vertices are numbered from 1 to n.
There is an edge from a vertex i to a vertex j iff either j = i + 1 or j = 3 * i.
The task is to find the minimum number of edges in a path in G from vertex 1 to vertex n.

Example 1:

Input:
N = 9
Output:
2
Explanation:
9 -> 3 -> 1, so
number of steps are 2. 
Expected Time Complexity: O(logN)
Expected Auxiliary Space: O(1)

Soultion - 

int minimumstep(int n){
	int count;
	while(n!=1){
		if(n%3==0){
			n = n/3;
		}else{
			n = n-1;
		}
		count++;
	}
	return count;
}

Q2. Find the sum of dependencies in graph.
Given a directed graph with V nodes and E edges. If there is an edge from u to v then u depends on v.
Find out the sum of dependencies for every node. Duplicate edges should be counted as separate edges.

Example 1:

Input:
V=4
E=4
Edges={ {0,2},{0,3},{1,3},{2,3} }
Output:
4
Explanation:
For the graph in diagram, A depends
on C and D i.e. 2, B depends on D i.e.
1, C depends on D i.e. 1
and D depends on none.
Hence answer -> 0 + 1 + 1 + 2 = 4
Expected Time Complexity:O(V)
Expected Auxillary Space:O(1)

Solution->

int SumOfDependencies(vector<int> adj[], int V){
	int sum = 0;
	for(int u=0; u<V; u++){
		sum = sum + adj[u].size();
	}
	return sum;
}

Date: - 9th June 2023

Q3. BFS of graph.
Solution - 

vector<int> bfsOfGraph(int V, vector<int> adj[]) {
        // Code here
        vector<int> v;
        queue<int> q;
        q.push(0);
        vector<bool> vis(V,false);
        vis[0] = true;
        while(!q.empty()){
            int u = q.front();
            q.pop();
            v.push_back(u);
            for(auto it: adj[u]){
                if(!vis[it]){
                    vis[it] = true;
                    q.push(it);
                }
            }
        }
        return v;
    }

Q4. DFS of graph.
Solution -> 

vector<int> v;

void solve(int s, vector<bool> &visited, vector<int> adj[]){
	visited[s] = true;
	v.push_back(s);
	for(int u: adj[s]){
		if(!visited[u]){
			solve(u, visited, adj);	
		}
	}
}

vector<int> DfsOfGraph(int V, vector<int> adj[]){
	vector<bool> visited(V,false);
	for(int i=0;i<V;i++){
		if(visited[i]==false){
			solve(i,visited, adj);
		}
	}
	return v;
}

Q5. Detect a cycle in an undirected graph.
Expected Time Complexity: O(V + E)
Expected Space Complexity: O(V)

Solution ->

bool Dfs_Rec(vector<int> adj[], int s, bool visited[], int parent){
	visited[s] = true;
	for(int u: adj[s]){
		if(visited[u] == false){
			if(Dfs_Rec(adj, u, visited, s)==true){
				return true;
			}
		}else if(u!=parent){
			return true;
		}
	}
	return false;
}
bool isCycle(vector<int> adj[], int V){
	bool visited[V];
	for(int i=0;i<V;i++){
		visited[i] = false;
	}
	for(int i=0;i<V;i++){
		if(visited[i]==false){
			if(Dfs_Rec()==true){
				return true;
			}
		}
	}
	return false;
}

Q6. Detect cycle in directed graph.
Expected Time Complexity: O(V + E)
Expected Auxiliary Space: O(V)
Solution ->

bool Dfs_Rec(vector<int>adj[], int s, vector<bool> &visited, vector<bool> &rec_st){
	visited[s] = true;
	rec_st[s] = true;
	for(int u: adj[s]){
		if(visited[u]==false && Dfs_Rec(adj, u, visited, rec_st)==true){
			return true;
		}else if(rec_st[u]==true){
			return true;
		}
	}
	rec_st[s] = false;
	return false;
}
bool isCycle(int V, vector<int> adj[]){
	vector<bool> visited(V,false);
	vector<bool> rec_st(V,false);
	for(int i=0;i<V;i++){
		if(visited[i]==false){
			if(Dfs_Rec(adj, i, visited, rec_st)==true){
				return true;
			}
		}
	}
	return false;	
}


